## signedBin(num, bits)
##The function should return a string that represents the two’s complement representation
##of num. In the event that the number is not able to be represented with the given
##number of bits, the function should raise a ValueError. Note: you should still have the
##‘0b’ prefix in your string.

def signedBin(num, bits):
    if num < -(2 ** (bits - 1)) or num >= 2 ** (bits - 1):
        raise ValueError("Number cannot be represented with the given number of bits")

    if num < 0:
        num = (1 << bits) + num

    bin_str = bin(num)[2:].zfill(bits)
    return '0b' + bin_str


print(signedBin(5, 8))
print(signedBin(-5, 8))
print(signedBin(-5, 9))



#signedInt(binNum)
#Should allow you to interpret a bit pattern (0bxxxxxx) as a signed integer. If the
#binNum is not a valid bit pattern, raise a TypeError

def signedInt(binNum):
    if not isinstance(binNum, str):
        raise TypeError("Invalid bit pattern")
    num = int(binNum, 2)
    num_bits = len(binNum) - 2
    if num & (1 << (num_bits - 1)):
        num -= (1 << num_bits)

    return num
